@page "/"
@inject NavigationManager nav
<PageTitle>Calendario</PageTitle>

@if(!LIN.Access.Calendar.Session.IsOpen)
{
    <div class="flex h-dvh w-full items-center justify-center">
        <Loader />
    </div>
    Task.Run(()=> nav.NavigateTo("/login"));
    return;
}

<div class="flex h-dvh w-full flex-grow flex-col items-center overflow-hidden px-4 lg:px-6">

    <div class="grid-cols-1 grid h-full w-full items-center justify-center gap-3 overflow-y-auto py-7 dl:overflow-y-hidden dl:grid-cols-2">

        @* Calendario *@
        <div class="flex w-full justify-center">
            <div class="w-full max-w-lg self-center">
                <LIN.Calendar.Client.Shared.Calendar eventos="eventos" OnClick="Filter" />
            </div>
        </div>

        @* Eventos *@
        <div class="mt-4 h-full w-full dl:mt-0">
            
            <div class="flex flex-col">
                <label class="text-5xl font-bold dark:text-zinc-200">Mis Eventos</label>
                <label class="text-2xl dark:text-zinc-400">Eventos Destacados</label>
            </div>

            <div class="flex w-full flex-col gap-3 py-3">

            @foreach(var e in renders)
            {

                    <div class="flex items-center rounded-lg bg-zinc-50 p-4 shadow-sm dark:bg-zinc-800">
                        <div class="flex w-full flex-col justify-center">
                            <label class="font-bold dark:text-zinc-300">@e.Nombre</label>
                            <label class="text-sm dark:text-zinc-400">@e.DateStart</label>
                        </div>
                    </div>


              
            }

            </div>
           
        </div>

    </div>

</div>

@code {


    public List<Types.Calendar.Models.EventModel> eventos { get; set; } = new();
    public List<Types.Calendar.Models.EventModel> renders { get; set; } = new();



    protected override void OnInitialized()
    {
        A();
        base.OnInitialized();
    }

    async void A()
    {
        var token = LIN.Access.Calendar.Session.Instance.Token;
        var x = await Access.Calendar.Controllers.Events.ReadAll(token);

        eventos = x.Models;
        StateHasChanged();
    }


    void Filter(DateTime date)
    {
        renders = eventos.Where(t => t.DateStart.Date == date.Date).ToList();
        StateHasChanged();
    }

}
@page "/homeui"
@inject NavigationManager nav
<PageTitle>Calendario</PageTitle>

@if (!LIN.Access.Calendar.Session.IsOpen)
{
    <div class="flex h-dvh w-full items-center justify-center">
        <Loader />
    </div>
    Task.Run(() => nav.NavigateTo("/login"));
    return;
}

<div class="UIScroll flex h-dvh w-full flex-col overflow-scroll dl:grid dl:grid-cols-2">

    <div class="UIScroll flex w-full flex-col items-center p-4 dl:h-full">

        <div class="flex w-full gap-2 dl:hidden">

            <div class="relative inline-flex h-10 w-10 items-center justify-center overflow-hidden rounded-full bg-current-100 dark:bg-zinc-800">
                <span class="font-medium text-current-600 dark:text-gray-300">JL</span>
            </div>

            <div class="flex flex-col">
                <label class="font-bold text-current-950">Prueba</label>
                <label class="-mt-1 text-sm text-current-400">@@prueba</label>
            </div>

        </div>


        <div class="mt-3 flex h-max max-h-[80dvh] w-full dl:max-h-full dl:px-3 dl:mt-0 dl:max-w-full">
            <LIN.Calendar.Shared.Calendar Events="eventos" OnClick="Filter" Selected="Sel" />
        </div>

    </div>

    <div class="w-full px-4">

        <div class="flex items-center gap-3">
            <button @onclick="() => NewEvent.Show(Sel)" type="button" class="inline-flex items-center rounded-full bg-current-500 p-2 text-center text-xs font-medium text-white hover:bg-current-600 focus:ring-4 focus:outline-none focus:ring-current-300 dark:bg-current-600 dark:hover:bg-current-700 dark:focus:ring-current-800">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-plus-lg h-3.5 w-3.5 text-white" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
                </svg>
            </button>

            <label class="text-lg font-bold dark:text-zinc-300">@Sel.ToString("dddd"). <span class="font-normal text-zinc-600 dark:text-zinc-400">@Sel.ToString("MMM dd") de @Sel.ToString("yyyy")</span></label>

        </div>
      
        <div class="mt-2 flex flex-col gap-2">

            @foreach (var e in renders)
            {
                <LIN.Calendar.Shared.EventControl Event="e" OnClick="OnPress" />
            }

        </div>
    </div>

</div>



<LIN.Calendar.Shared.Drawers.DrawerPeople @ref="NewEvent" OnSuccess="OnSuccess"></LIN.Calendar.Shared.Drawers.DrawerPeople>
<LIN.Calendar.Shared.Drawers.DrawerEvent @ref="DrawerEvent" OnDelete="OnDelete"/>

@code {
    LIN.Calendar.Shared.Drawers.DrawerPeople NewEvent;

    LIN.Calendar.Shared.Drawers.DrawerEvent DrawerEvent;

    public List<Types.Calendar.Models.EventModel> eventos { get; set; } = new();
    public List<Types.Calendar.Models.EventModel> renders { get; set; } = new();



    protected override void OnInitialized()
    {
        A();

        base.OnInitialized();
    }

    async void A()
    {
        var token = LIN.Access.Calendar.Session.Instance.Token;
        var x = await Access.Calendar.Controllers.Events.ReadAll(token);

        eventos = x.Models;
        Filter(DateTime.Now);
        StateHasChanged();
    }


    DateTime Sel = DateTime.Now;


    void Filter(DateTime? date = null)
    {
        Sel = date ?? Sel;
        renders = eventos.Where(t => t.DateStart.Date == Sel.Date).ToList();
        StateHasChanged();
    }



    void OnDelete(int id)
    {
        eventos.RemoveAll(t => t.Id == id);
        renders.RemoveAll(t => t.Id == id);
        StateHasChanged();
    }


    void OnSuccess(EventModel @event)
    {

        eventos.Add(@event);
        Filter();
        StateHasChanged();
    }


    void OnPress(EventModel @event)
    {
        DrawerEvent.Show(@event);
        StateHasChanged();
    }

}